/*
** Module Name:
**    SdbPseudoCode.txt
**
** Description:
**    This file is pseudo-code to assist with the detailed design of
**    the Status Database (SDB). The SDB stores all the engineering
**    data that is generated by the TTL (and possibly 3rd party)
**    software on the telescope. In the first instance, the SDB will
**    be written in a way that it will be able to accept and serve
**    any submitted engineering parameter. This will act as a
**    prototype for the finial SDB, and will also allow other systems
**    to continue to develop, who would normally depend on the SDB.
**    This pseudo-code has been written with this particular model in
**    mind.
**
**    The initial implementation will be based upon a linked list
**    the entries within the linked list element structure will
**    reflect the information that may be served. Each entry in the
**    linked list will be of type eSdbDatum_t. In the event that an
**    unrecognised datum is sent to the SDB, a new entry in the linked
**    list will be created. In the event that a datum is submitted
**    that already exists, the value is just updated to refelct the
**    change. With requests for data, if the request is for existing
**    data, it is supplied otherwise a "data not available" message
**    is provided.
**
**
** State transition diagram:
**    The following is the state transition diagram of the SDB task.
**    It represents the state that is reported to the continuous
**    heartbeat (CHB) task, for the master control process (MCP) to
**    be able to make judgements on what systems are correctly
**    functioning. In this case, the task must identify and report
**    its own state. Failure do so will result in a TIMEOUT state
**    being detected by teh CHB and the MCP will take remedial action.
**
**                      +-------+
**       ,--------------|  OFF  |<---(9)
**       |              +-------+
**       |                  ^
**       |                  |
**      (1)                (8)
**       |                  |
**       V                  |
**   +-------+          +--------+
**   | INIT  |---(2)--->| FAILED |
**   +-------+          +--------+
**       |                  ^
**       |                  |
**      (3)                (6)
**       |                  |
**       |                  |
**       |              +-------+           +------+
**       `------------->| OKAY  |----(7)--->| SAFE |
**                      +-------+           +------+
**                        |   ^
**                        |   |
**                       (4) (5)
**                        |   |
**                        V   |
**                      +-------+
**                      | WARN  |
**                      +-------+
**
** Description of states:
**
**      OFF: The task is not running.
**     INIT: The task is performing its initial startup.
**     OKAY: The task is running and submissions and requests are being
**           processed.
**     WARN: The task is running but has not processed a submission or
**           request recently.
**    FAILD: The task is running, but there is some problem, that it can
**           not recover from. External intervention is required.
**     SAFE: The task is in a safe state and may be terminated by an
**           external process without risk of data corruption.
**
** Description of transitions:
**
**    1. The task is started.
**    2. The initalisation failed.
**    3. The task has initialised and is ready to receive messages.
**    4. A recoverable error has occurred. Error recovery commences.
**    5. A recoverable error has been corrected and normal operation resumes.
**    6. An irrecoverable error occurs.
**    7. The task has been requested to go to a safe-state.
**    8. The fault could not be receovered, so the task is aborting.
**    9. (FROM ANY STATE), the task crashes or is terminated at a system level.
**
**
** Imported files:
**    CIL map
**       CilName, IP address, IP port number
**
** References:
**    LT 2.0m Computing Architectural Design v0.53. pp73-83.
**    LT 2.0m System Database Interface Control Document v0.2.
**
** Concepts:
**
** Authors:
**    djm: Derek J. McKay (TTL)
**
** Version:
**    $Id: SdbPseudoCode.txt,v 0.3 2000/05/09 16:43:23 djm Exp $
**
** History:
**    $Log: SdbPseudoCode.txt,v $
**    Revision 0.3  2000/05/09 16:43:23  djm
**    Expanded the database list structure.
**
**    Revision 0.2  2000/05/03 17:06:18  djm
**    Simplified data submission, assuming that single-datum
**    submission is actually a multi-data submission with the
**    number of submitted elements set to 1.
**
**    Revision 0.1  2000/05/03 16:23:45  djm
**    Initial creation based on CAD & SDB ICD and requirements
**    for software development to "first light".
**
**
*/


/* Include files */

/* Structure definitions */

struct eSdbDatum
{
   eSdbData_t *NextPtr;      /* Pointer to next element */
   eSdbData_t *PrevPtr;      /* Pointer to previous element */
   Uint16_t   ParentId;      /* ID of parent */
   Uint16_t   ElementId;     /* Unique ID of element within parent */
   eSdbType_t ElementType;   /* Enumerated type defining data storage */
   eSdbUnit_t ElementUnit;   /* Enumerated type defining units */
   Bool_t     ConfigIndic;   /* ... */
   Uint16_t   ElementLgth;   /* Size of element array */
   void      *ValuePtr;      /* Pointer to values */
   time_t TimeStamp;         /* Time associated with datum */
} eSdbDatum_t;

/* Global variables */


/*
** Function Name:
**    main()
**
** Type:
**    ...
**
** Purpose:
**    Top level function of the SDB.
**
** Description:
**    ...
**
** Arguments:
**    ...
**
** Authors:
**    djm: Derek J. McKay (TTL)
**
** History:
**    28-Apr-2000 djm Initial creation.
**
*/

main()
{

   /* Do initalisation */
   iSdbInit();
   if(Status != SYS_NOMINAL)
   {
      iSdbReport("Error during setup");
      exit(EXIT_FAILURE);
   }

   /* Start the main loop */
   for(;;)
   {
      /* Receive a CIL message */
      Status = eCilReceive(msg);

      /* React to the results of the receive */
      switch(Status)
      {
         case SYS_NOMINAL:
            iSdbProcMsf(msg);
            break;
         case E_SOME_AWFUL_CIL_ERROR:
            iSdbState(FAULT);
            exit(EXIT_FAILURE);
         case E_CIL_TIMEOUT:
            /* Possibly, we worry if there are too many of these */
            break;
         deafult:
            iSdbState(WARN);
            iScdReport("Unexpected CIL error");
            break;
      }  /* End of switch(Status) */

   }  /* End of for(;;) */

}  /* End of main() */



/*
** Function Name:
**    iSdbInit()
**
** Type:
**    ...
**
** Purpose:
**    Setup SDB program (CIL, linked-list, etc.).
**
** Description:
**    ...
**
** Arguments:
**    ...
**
** Authors:
**    djm: Derek J. McKay (TTL)
**
** History:
**    28-Apr-2000 djm Initial creation.
**
*/

iSdbInit()
{
   /* Create a linked list */
   /* Set the first element to be the Sdb state */
   /* Set the next element to be the number of varables held in the SDB */
}


/*
** Function Name:
**    iSdbProcMsg()
**
** Type:
**    ...
**
** Purpose:
**    Process any received CIL message.
**
** Description:
**    ...
**
** Arguments:
**    ...
**
** Authors:
**    djm: Derek J. McKay (TTL)
**
** History:
**    28-Apr-2000 djm Initial creation.
**
*/

iSdbProcMsg(MsgPtr)
{

   /* Extract command/message-type from the CIL message */
   Cmd = MsgPtr.Type;

   /* Decide what to do based on that command */
   switch(Cmd)
   {
      case HEARTBEAT:  iSdbHeartBeat(MsgPtr);
                       break;
      case SUBMIT:     iSdbSubmit(MsgPtr);
                       break;
      case RETRIEVE:   iSdbRetrieve(MsgPtr);
                       break;
      case PURGE:      /* ??? - Delete entries older than certain age */
                       break;
      case SHUTDOWN:   iSdbState(SAFE);
                       exit(EXIT_FAILURE);
                       break;
      default:         iSdbReply("Request failure");
                       break;
   }
}  /* End of iSdbProcMsg() */



/*
** Function Name:
**    iSdbState()
**
** Type:
**    ...
**
** Purpose:
**    Record the SDBs state (within its own database system).
**
** Description:
**    ...
**
** Arguments:
**    ...
**
** Authors:
**    djm: Derek J. McKay (TTL)
**
** History:
**    28-Apr-2000 djm Initial creation.
**
*/

iSdbState()
{
   /* Set state element of linked list with state. That's all. */
}



/*
** Function Name:
**    iSdbHeartBeat()
**
** Type:
**    ...
**
** Purpose:
**    To process any received heartbeat from the CHB.
**
** Description:
**    ...
**
** Arguments:
**    ...
**
** Authors:
**    djm: Derek J. McKay (TTL)
**
** History:
**    28-Apr-2000 djm Initial creation.
**
*/

iSdbHeartbeat()
{
   /* Process heartbeat command (same as MCB does it) */
}



/*
** Function Name:
**    iSdbSubmit()
**
** Type:
**    ...
**
** Purpose:
**    Extracts data elements from a message and updates
**    or adds-to the volatile database.
**
** Description:
**    ...
**
** Arguments:
**    ...
**
** Authors:
**    djm: Derek J. McKay (TTL)
**
** History:
**    28-Apr-2000 djm Initial creation.
**
*/

iSdbSubmit()
{
   /* Determine how many data are contained in the message */
   NumData = ... ;

   /* Loop about for each datum */
   for(n = HeaderSize; n < NumData; n+=DatumLength)
   {
      Status = iSdbSetData(MsgPtr+n);
      if(Status != SYS_NOMINAL)
      {
         iSdbReply(NAK);
      }
   }

   /* If we get this far it all worked! Report success. */
   iSdbReply(ACK);
}



/*
** iSdbSetData()
**
** This function expects a pointer into the correct location of
** a CIL message, in order to extract the relevant part.
*/

iSdbSetData(MsgPtr)
{
   /* Extract DataId, DataValue, DataUnitId and TimeStamp */

   /* Check if DataId already exists in the linked list */

   /* If it does, replace its value & timestampe with the new one */

   /* If we get to the end of the linked list, then create a new entry */

   /* If we can't create a new entry return an error */

   /* If we can, return SYS_NOMINAL */
}




/*************************** JUNK STUFF FOLLOWS ***********************/




iSdbGetData()
{
   /* Check if element already exists in the linked list */

   /* If it does, reply with its value */

   /* If it is not found, then reply with an error */
}


/*
** In a iSdbReply(), the original CIL header is used. The return
** message type is an ACK/NAK/etc. and the data body is set to 0
** length.
*/


/* EOF */


