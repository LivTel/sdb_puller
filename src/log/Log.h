/*
** Header File Name:
**    Log.h
**
** Purpose:
**    Public header file for the System Logging Library (LOG)
**
** Description:
**    ...
**
** Authors:
**    djm: Derek J. McKay
**
** Version:
**    $Id: Log.h,v 0.10 2002/04/10 09:12:24 djm Exp $
**
** History:
**    $Log: Log.h,v $
**    Revision 0.10  2002/04/10 09:12:24  djm
**    Added a new error code for the case when eLogDebug() or
**    eLogInfo() is called with a status code (of 0) - which is
**    the most common usage error at the coding level.
**
**    Revision 0.9  2001/12/05 17:43:15  djm
**    Added facility code definitions. Also included a package
**    facility (E_LOG_FACILITY) which is set in this header file
**    and defines the facility used in messages generated by the
**    LOG package library. E_LOG_FACILITY is currently set to
**    E_LOG_LOCAL0 (Local0).
**
**    Revision 0.8  2000/11/23 11:13:33  mjf
**    If host for logging is unresolved, then return E_LOG_HOST_UNKNOWN.
**
**    Revision 0.7  2000/11/21 10:08:53  djm
**    Added new error codes for the reporting/setup of an instance name.
**
**    Revision 0.6  2000/10/04 10:59:42  djm
**    Added extra error codes. Fixed some comments.
**
**    Revision 0.5  2000/09/12 10:40:58  djm
**    Corrected variable list in the eLogSetup() function prototype.
**
**    Revision 0.4  2000/07/14 15:57:05  djm
**    Added \n at end of file for GCC port.
**
**    Revision 0.3  2000/06/12 09:12:24  djm
**    Replaced incorrectly named type.
**
**    Revision 0.2  2000/06/06 13:36:53  djm
**    Added independance from syslog.h by directly encoding the
**    message priorities. Also alterned the naming convention on
**    the eLogSetup() function prototype.
**
**    Revision 0.1  2000/06/05 11:33:58  djm
**    Initial creation.
**
**
*/


#ifndef LOG_H_DEFINED
#define LOG_H_DEFINED


/* Code for coping with decl'n/def'n/init'n of global variables */

#ifdef M_LOG_MAIN
   #define E_LOG_EXTERN
   #define E_LOG_INIT(Initialisation) = Initialisation
#else
   #define E_LOG_EXTERN extern
   #define E_LOG_INIT(Initaliasation)
#endif


/* Required include files */

#include "TtlSystem.h"       /* For Status_t definition */
#include <stdarg.h>


/* Enumerate list of status/error values */

typedef enum
{
   E_LOG_GEN_ERR = STATUS_START(LOG),  /* Miscellaneous error */
   E_LOG_FILENOTOPENED,                /* Unable to open a file */
   E_LOG_OUTOFMEMORY,                  /* Insufficient memory */
   E_LOG_BAD_PRIO,                     /* Unknown priority received */
   E_LOG_SOCKET_ERROR,                 /* Unable to open socket */
   E_LOG_CONNECT_ERROR,                /* Unable to connect socket */
   E_LOG_PREFIX_TOO_LONG,              /* Name exceeds max. length */
   E_LOG_INSTANCE_TOO_LONG,            /* Instance name exceeds max. length */
   E_LOG_NO_PREFIX,                    /* No name specified */
   E_LOG_ZERO_LENGTH_PREFIX,           /* Empty string specified as name */
   E_LOG_HOST_UNKNOWN,                 /* Logging host not in host table */
   E_LOG_NULL_FORMAT_PTR,              /* No format pointer has been set */

   E_LOG_EOERR_LIST
} eLogStatus_t;


/*
** Symbolic constants
*/

/*
** Message priorities
**
** Priorities associated with messages that do not normally have a status
** code reported with them, are indicated as "(no status)".
**
** If the facilities do not exist (default), then they are defined based on
** those defined in RFC3164.
*/

/* Start by defining syslog priorities if they haven't already been defined */
#ifndef LOG_EMERG
#define LOG_EMERG       0       /* System is unusable */
#define LOG_ALERT       1       /* Action must be taken immediately */
#define LOG_CRIT        2       /* Critical conditions */
#define LOG_ERR         3       /* Error conditions */
#define LOG_WARNING     4       /* Warning conditions */
#define LOG_NOTICE      5       /* Normal but significant condition */
#define LOG_INFO        6       /* Informational */
#define LOG_DEBUG       7       /* Debug-level messages */
#endif

/* Define the LOG package macros to match these */
#define E_LOG_DEBUG     LOG_DEBUG   /* Debug/development msgs (no status) */
#define E_LOG_INFO      LOG_INFO    /* Informational messages (no status) */
#define E_LOG_NOTICE    LOG_NOTICE  /* Informational messages */
#define E_LOG_WARNING   LOG_WARNING /* Warning, but not necessarily failure */
#define E_LOG_ERR       LOG_ERR     /* Failure, but no intervention required */
#define E_LOG_CRIT      LOG_CRIT    /* Failure + external intervention req'd */
#define E_LOG_ALERT     LOG_ALERT   /* Fail + immediate ext intervention req'd */
#define E_LOG_EMERG     LOG_EMERG   /* Panic condition */

/* Macros for selecting message priorities */

#define E_LOG_MASK(pri)  (1 << (pri))            /* Mask for one priority */
#define E_LOG_UPTO(pri)  ((1 << ((pri)+1)) - 1)  /* All prio's through prio */


/* Facility codes */

#ifndef LOG_KERN
#define LOG_KERN        (0<<3)  /* kernel messages */
#define LOG_USER        (1<<3)  /* random user-level messages */
#define LOG_MAIL        (2<<3)  /* mail system */
#define LOG_DAEMON      (3<<3)  /* system daemons */
#define LOG_AUTH        (4<<3)  /* security/authorization messages */
#define LOG_SYSLOG      (5<<3)  /* messages generated internally by syslogd */
#define LOG_LPR         (6<<3)  /* line printer subsystem */
#define LOG_NEWS        (7<<3)  /* network news subsystem */
#define LOG_UUCP        (8<<3)  /* UUCP subsystem */
#define LOG_CRON        (9<<3)  /* clock daemon */
#define LOG_AUTHPRIV    (10<<3) /* security/authorization messages (private) */
#define LOG_FTP         (11<<3) /* ftp daemon */
        /* other codes through 15 reserved for system use */
#define LOG_LOCAL0      (16<<3) /* reserved for local use */
#define LOG_LOCAL1      (17<<3) /* reserved for local use */
#define LOG_LOCAL2      (18<<3) /* reserved for local use */
#define LOG_LOCAL3      (19<<3) /* reserved for local use */
#define LOG_LOCAL4      (20<<3) /* reserved for local use */
#define LOG_LOCAL5      (21<<3) /* reserved for local use */
#define LOG_LOCAL6      (22<<3) /* reserved for local use */
#define LOG_LOCAL7      (23<<3) /* reserved for local use */
#endif

/* Define the LOG package facility codes to match the system ones */
#define E_LOG_KERN     LOG_KERN
#define E_LOG_USER     LOG_USER
#define E_LOG_MAIL     LOG_MAIL
#define E_LOG_DAEMON   LOG_DAEMON
#define E_LOG_AUTH     LOG_AUTH
#define E_LOG_SYSLOG   LOG_SYSLOG
#define E_LOG_LPR      LOG_LPR
#define E_LOG_NEWS     LOG_NEWS
#define E_LOG_UUCP     LOG_UUCP
#define E_LOG_CRON     LOG_CRON
#define E_LOG_AUTHPRIV LOG_AUTHPRIV
#define E_LOG_FTP      LOG_FTP
/* ... */
#define E_LOG_LOCAL0   LOG_LOCAL0
#define E_LOG_LOCAL1   LOG_LOCAL1
#define E_LOG_LOCAL2   LOG_LOCAL2
#define E_LOG_LOCAL3   LOG_LOCAL3
#define E_LOG_LOCAL4   LOG_LOCAL4
#define E_LOG_LOCAL5   LOG_LOCAL5
#define E_LOG_LOCAL6   LOG_LOCAL6
#define E_LOG_LOCAL7   LOG_LOCAL7


/* Define the facility used by the LOG library */

#define E_LOG_FACILITY E_LOG_LOCAL0


/* Function prototypes */

Status_t eLogSetup(const char *PrefixPtr, const char *InstancePtr, 
                   const char *FileNamePtr, int PrioMask,
                   Bool_t PrintNet, Bool_t PrintCon);

void eLogReport(int Priority, Status_t Status, const char *FormatPtr, ...);

void eLogDebug(const char *FormatPtr, ...);
void eLogInfo(const char *FormatPtr, ...);
void eLogNotice(Status_t Status, const char *FormatPtr, ...);
void eLogWarning(Status_t Status, const char *FormatPtr, ...);
void eLogErr(Status_t Status, const char *FormatPtr, ...);
void eLogCrit(Status_t Status, const char *FormatPtr, ...);
void eLogAlert(Status_t Status, const char *FormatPtr, ...);
void eLogEmerg(Status_t Status, const char *FormatPtr, ...);


#endif



/* EOF */
